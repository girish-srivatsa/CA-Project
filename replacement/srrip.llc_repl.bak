#include "cache.h"

#define maxRRPV 3
#define LLC_DATA_INSERTION_RRPV 3
#define LLC_TRANSLATION_INSERTION_RRPV 0

uint32_t l3_rrpv[LLC_SET][LLC_WAY];

// initialize replacement state
void CACHE::llc_initialize_replacement() {
//  cout << "Initialize SRRIP state" << endl;
  cout << NAME << " has SRRIP replacement policy, Data insertion rrpv: " << LLC_DATA_INSERTION_RRPV << "  Translation insertion rrpv: " << LLC_TRANSLATION_INSERTION_RRPV << endl;

  for (int i = 0; i < LLC_SET; i++) {
    for (int j = 0; j < LLC_WAY; j++) {
      l3_rrpv[i][j] = maxRRPV;
    }
  }
}

// find replacement victim
uint32_t CACHE::llc_find_victim(uint32_t cpu, uint64_t instr_id, uint32_t set,
                                const BLOCK *current_set, uint64_t ip,
                                uint64_t full_addr, uint32_t type) {
  // look for the maxRRPV line
  while (1) {
    for (int i = 0; i < LLC_WAY; i++)
      if (l3_rrpv[set][i] == maxRRPV){

	#ifdef FIND_DEAD_BLOCKS
        if (block[set][i].valid) {

          if (block[set][i].used) {
            used_total++;
          }else {
            unused_total++;
          }

          if (block[set][i].type == LOAD){
            if (block[set][i].used) {
              used_load++;
            }else {
              unused_load++;
            }
          }

          if (block[set][i].type == LOAD_TRANSLATION) {
            if (block[set][i].used) {
              used_translations++;
            }else {
              unused_translations++;
            }
          }
        }
#endif

#ifdef FIND_INTERFERENCE
        if (block[set][i].valid) {

          total_eviction++;
          if (block[set][i].type == LOAD_TRANSLATION){
             total_translation_evictions++;
          }

          if (type == LOAD_TRANSLATION) {

            if (block[set][i].type == LOAD_TRANSLATION){
              translation_evicting_translation++;

            }else if (block[set][i].type == LOAD) {
              translation_evicting_load++;
            }

          }else if (type == LOAD){

            if (block[set][i].type == LOAD_TRANSLATION){
              load_evicting_translation++;

            }else if (block[set][i].type == LOAD) {
              load_evicting_load++;
            }

          }
        }
#endif

        return i;
      }

    for (int i = 0; i < LLC_WAY; i++)
      l3_rrpv[set][i]++;
  }

  // WE SHOULD NOT REACH HERE
  assert(0);
  return 0;
}

// called on every cache hit and cache fill
void CACHE::llc_update_replacement_state(uint32_t cpu, uint32_t set,
                                         uint32_t way, uint64_t full_addr,
                                         uint64_t ip, uint64_t victim_addr,
                                         uint32_t type, uint8_t hit) {

  if ((type == WRITEBACK) && ip)
    assert(0);

  // uncomment this line to see the LLC accesses
  // cout << "CPU: " << cpu << "  LLC " << setw(9) << TYPE_NAME << " set: " <<
  // setw(5) << set << " way: " << setw(2) << way; cout << hex << " paddr: " <<
  // setw(12) << paddr << " ip: " << setw(8) << ip << " victim_addr: " <<
  // victim_addr << dec << endl;

  if (hit)
    l3_rrpv[set][way] = 0;
  else{
    if(type == LOAD_TRANSLATION){
      l3_rrpv[set][way] = LLC_TRANSLATION_INSERTION_RRPV;
    }else{
      l3_rrpv[set][way] = LLC_DATA_INSERTION_RRPV;
    }

  }
}

// use this function to print out your own stats at the end of simulation
void CACHE::llc_replacement_final_stats() {}
